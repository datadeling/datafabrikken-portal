name: Deploy to staging

on:
  pull_request:
    types: [ready_for_review, opened, reopened, synchronize]
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and deploy to staging environment when pull request is created
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - uses: actions/checkout@v2

      - name: Setup gcloud CLI for image-store
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SA_DATAFABRIKKEN_GCR_KEY }}
          export_default_credentials: true

      - name: Configure docker to use the gcloud command-line tool as a credential helper
        run: gcloud auth configure-docker eu.gcr.io

      - name: Cache Docker layers
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: eu.gcr.io/datafabrikken-infra/datafabrikken-portal
          flavor: |
            latest=false
          tags: |
            type=raw,value=staging_latest
            type=raw,value=${{ github.sha }},priority=1000
            type=ref,event=branch

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args:  |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

      - name: Apply Helm template
        run: |
          helm repo add datafabrikken https://datadeling.github.io/helm-chart/
          helm fetch --untar --untardir ./helm datafabrikken/datafabrikken-portal
          helm template \
          --set DOCKER_IMAGE_NAME="eu.gcr.io/datafabrikken-infra/datafabrikken-portal:${{ steps.meta.outputs.version }}" \
          -f ./helm/datafabrikken-portal/values/staging.yaml \
          ./helm/datafabrikken-portal/ > ./kubectlapply.yaml
          chmod o+w ./kubectlapply.yaml
          cat kubectlapply.yaml

      - name: Setup gcloud CLI for deploy
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.DATAFABRIKKEN_DEV_AUTODEPLOY }}
          export_default_credentials: true

      - name: Deploy to GCP
        run: |
          gcloud container clusters get-credentials datafabrikken-dev --region europe-north1-a --project datafabrikken-dev
          kubectl apply -f ./kubectlapply.yaml --force
          if ! kubectl --namespace=staging rollout status deployment datafabrikken-portal; then
            kubectl --namespace=staging rollout undo deployment datafabrikken-portal
            kubectl --namespace=staging rollout status deployment datafabrikken-portal
            exit 1
          fi

      - name: Notify slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: 'Application: datafabrikken-portal | Environment: staging'
          fields: commit,author,workflow
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
